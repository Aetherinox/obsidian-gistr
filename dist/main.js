/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

/*
    @locale     : English (en)
*/
var en = {
    cfg_title: 'Gistr - Gist Integration',
    cfg_desc: 'The Gistr plugin allows you to embed OpenGist and Github Gist snippets within your Obsidian notes.',
    cfg_tab_ge_title: 'General Settings',
    cfg_tab_ge_header: 'General settings for Gistr.',
    cfg_tab_og_title: 'OpenGist Settings',
    cfg_tab_og_header: 'Opengist is a self-hosted pastebin powered by Git. All snippets are stored in a Git repository and can be read and/or modified using standard Git commands, or with the web interface. It is similiar to GitHub Gist, but open-source and is self-hosted. OpenGist supports Windows, Linux, and MacOS.',
    cfg_tab_gh_title: 'Github Settings',
    cfg_tab_gh_header: 'Github Gists let you store and distribute code snippets without setting up a full-fledged repository. Store snippets such as strings, bash scripts, markdown, text files, and other small pieces of data.',
    cfg_tab_sp_title: 'Support',
    cfg_sec_keyword_name: 'Trigger Keyword',
    cfg_sec_keyword_desc: 'The word to use inside a codeblock to designate that codeblock as an opengist portal.',
    cfg_sec_padding_top_name: 'Top Padding',
    cfg_sec_padding_top_desc: 'Padding between gist codeblock header and code.',
    cfg_sec_padding_bottom_name: 'Bottom Padding',
    cfg_sec_padding_bottom_desc: 'Padding between gist codeblock and the bottom scrollbar.',
    cfg_sec_theme_name: 'Color Theme',
    cfg_sec_theme_desc: 'This determines what color scheme will be used when loading an OpenGist code block. MUST reload your note for the new stylesheet to be loaded.',
    cfg_sec_css_name: 'Custom CSS',
    cfg_sec_css_desc: 'Paste CSS properties to override existing colors.',
    cfg_sec_css_placeholder: 'Paste CSS here',
    cfg_sec_support_name: 'Support',
    cfg_sec_support_desc: 'The following buttons are associated to useful resources for this plugin.',
    cfg_sec_support_gs_name: 'Getting Started',
    cfg_sec_support_gs_desc: 'View brief introduction to getting started with this plugin',
    cfg_sec_support_gs_btn: 'Open',
    cfg_sec_support_repo_label: 'Plugin Repo',
    cfg_sec_support_repo_url: 'https://github.com/Aetherinox/obsidian-gistr',
    cfg_sec_support_repo_btn: 'View',
    cfg_sec_support_ogrepo_label: 'OpenGist: Download',
    cfg_sec_support_ogrepo_url: 'https://github.com/thomiceli/opengist/releases',
    cfg_sec_support_ogrepo_btn: 'View',
    cfg_sec_support_ogdocs_label: 'OpenGist: Docs',
    cfg_sec_support_ogdocs_url: 'https://github.com/thomiceli/opengist/blob/master/docs/index.md',
    cfg_sec_support_ogdocs_btn: 'View',
    cfg_sec_support_ogdemo_label: 'OpenGist: Demo',
    cfg_sec_support_ogdemo_url: 'https://opengist.thomice.li/all',
    cfg_sec_support_ogdemo_btn: 'View',
    cfg_sec_support_gist_label: 'Github Gist',
    cfg_sec_support_gist_url: 'https://gist.github.com/',
    cfg_sec_support_gist_btn: 'View',
    gs_base_header: 'This plugin allows you to integrate both OpenGist and Github Gist pastes within your Obsidian notes. To use this plugin, you can either create a new Github gist, or setup your own OpenGist server. OpenGist is free, and takes only minutes to configure.',
    gs_og_btn_repo: 'Download OpenGist',
    gs_og_btn_docs: 'OpenGist Docs',
    gs_og_sub_1: 'Once you install and set up OpenGist, you can sign in to your OpenGist website and create your first Gist. After your Gist is created, return to your Obsidian node, and integrate your Gist into your note using code similar to the following:',
    gs_og_name: 'OpenGist Integration',
    gs_og_desc: 'OpenGist supports Windows, Linux, MacOS, and Docker. To download and set up OpenGist, click below.',
    gs_gh_name: 'Github Gists',
    gs_gh_desc: 'To paste a Github Gist into your note, use a command similar to the following examples:',
    gs_btn_settings_open: 'Open Settings',
    gs_btn_close: 'Close',
    base_underdev_title: 'Feature Under Development',
    base_underdev_msg: 'I am currently working with the developer of OpenGist to make minor changes to how OpenGist pastes appear, including moving the "view raw" button to the bottom so that Obsidian\'s edit button does not overlap.',
};

/*
    Languages Helper
*/
/*
    get plugin name
*/
function PluginID() {
    return 'gistr';
}
/*
    Language entries
*/
const SetupLocale = {
    en,
};
/*
    get locale val
*/
const locale = SetupLocale[obsidian.moment.locale()];
/*
    Language Method
*/
function lng(item, ...args) {
    if (!locale)
        console.error("Gistr language not found", obsidian.moment.locale());
    let val = (locale && locale[item]) || en[item];
    return val.replace(/{(\d+)}/g, (match, index) => {
        const replace = args[index];
        return typeof replace !== 'undefined' ? replace : match;
    });
}

let nanoid = (size = 21) =>
  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id += '-';
    } else {
      id += '_';
    }
    return id
  }, '');

/*
    Import
*/
/*
    Basic Declrations
*/
const PID = PluginID();
const AppBase = 'app://obsidian.md';
/*
    Gistr Backend
*/
class GistrBackend {
    constructor(settings) {
        /*
            Collect message data from JS_EventListener
        */
        this.messageEventHandler = (evn) => {
            if (evn.origin !== 'null')
                return;
            if (evn.data.sender !== PID)
                return;
            const uuid = evn.data.gid;
            const scrollHeight = evn.data.scrollHeight;
            const gist_Container = document.querySelector('iframe#' + uuid);
            gist_Container.setAttribute('height', scrollHeight);
        };
        /*
            Event processor
        */
        this.processor = (src, el) => __awaiter(this, void 0, void 0, function* () {
            const obj = src.trim().split("\n");
            return Promise.all(obj.map((gist) => __awaiter(this, void 0, void 0, function* () {
                return this.GistHandle(el, gist);
            })));
        });
        this.settings = settings;
    }
    /*
        Gist > Handle
    */
    GistHandle(el, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const pattern = /(?<protocol>https?:\/\/)?(?<host>[^/]+\/)?((?<username>[\w-]+)\/)?(?<uuid>\w+)(\#(?<filename>.+))?/;
            const match = data.match(pattern).groups;
            const host = match.host;
            const username = match.username;
            const uuid = match.uuid;
            const file = match.filename;
            /*
                Since opengist can really be any website, check for matching github links
            */
            const bMatchGithub = /((https?:\/\/)?(.+?\.)?github\.com(\/[A-Za-z0-9\-\._~:\/\?#\[\]@!$&'\(\)\*\+,;\=]*)?)/g.test(host);
            /*
                No UUID match
            */
            if (typeof uuid === undefined)
                return this.ThrowError(el, data, `Could not find gist id -- Make sure correct URL is specified. ( ${host} )`);
            /*
                compile url to gist
            */
            let gistSrcURL = (file !== undefined ? `https://${host}${username}/${uuid}.json?file=${file}` : `https://${host}${username}/${uuid}.json`);
            const reqUrlParams = { url: gistSrcURL, method: "GET", headers: { "Accept": "application/json" } };
            try {
                const req = yield obsidian.request(reqUrlParams);
                const json = JSON.parse(req);
                return this.GistGenerate(el, host, uuid, json, bMatchGithub);
            }
            catch (err) {
                return this.ThrowError(el, data, `Invalid gist url ${gistSrcURL} ( Error: ${err} )`);
            }
        });
    }
    /*
        Gist > Generate

        create new iframe for each gist, assign it a uid, set the needed attributes, and generate the css, js
    */
    EventListener(uuid) {
        return `
        <script>
            window.addEventListener( 'load', ( ) =>
            {
                window.top.postMessage(
                {
                    sender:         '${PID}',
                    gid:            '${uuid}',
                    scrollHeight:   document.body.scrollHeight
                }, '${AppBase}');
            } )
        </script>
        `;
    }
    /*
        Gist > Generate

        create new iframe for each gist, assign it a uid, set the needed attributes, and generate the css, js
    */
    GistGenerate(el, host, uuid, json, bGithub) {
        return __awaiter(this, void 0, void 0, function* () {
            /*
                create uuid and iframe
            */
            const gid = `${PID}-${uuid}-${nanoid()}`;
            const ct_iframe = document.createElement('iframe');
            ct_iframe.id = gid;
            ct_iframe.classList.add(`${PID}-container`);
            ct_iframe.setAttribute('sandbox', 'allow-scripts allow-popups allow-popups-to-escape-sandbox allow-top-navigation-by-user-activation');
            ct_iframe.setAttribute('loading', 'lazy');
            ct_iframe.setAttribute('width', '100%');
            /*
                https://fonts.googleapis.com
    
                policy directive error if certain attributes arent used. doesnt affect the plugin, but erors are bad
            */
            ct_iframe.setAttribute('csp', "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline' ${host} ;");
            /*
                define parent
            */
            const ct_Parent = document.createElement('base');
            ct_Parent.target = "_parent";
            /*
                assign css, body, js
            */
            const content_css = yield this.GetCSS(el, uuid, (bGithub ? json.stylesheet : json.embed.css));
            const content_body = (bGithub ? json.div : "");
            const content_js = (bGithub ? "" : yield this.GetJavascript(el, uuid, (this.settings.theme == "Dark" ? json.embed.js_dark : json.embed.js)));
            let css_bg_color = (this.settings.theme == "Dark" ? this.settings.og_clr_bg_dark : this.settings.og_clr_bg_light);
            /*
                Declare custom css override
            */
            let css_override = ((bGithub && this.settings.css_gh && this.settings.css_gh.length > 0) ? (this.settings.css_gh) : (this.settings.css_og && this.settings.css_og.length > 0 && this.settings.css_og)) || "";
            /*
                Create Iframe
            */
            ct_iframe.srcdoc =
                `
        <html>
            <head>
                <style>
                    html, body { height: 100%; margin: 0; padding: 0; }
                </style>

                ${ct_Parent.outerHTML}
                ${this.EventListener(gid)}

                <!-- Gistr: css embedded json src -->
                <style>
                    ${content_css}
                </style>

                <!-- Gistr: css override -->
                <style>
                    ${css_override}

                    .opengist-embed .code
                    {
                        padding-top:        ${this.settings.blk_pad_t}px;
                        padding-bottom:     ${this.settings.blk_pad_b}px;
                        background-color:   #${css_bg_color} !important;
                    }

                    .opengist-embed .html
                    {
                        background-color: #${css_bg_color} !important;
                    }

                </style>

                <script>
                    ${content_js}
                </script>

            </head>

            <body>
                ${content_body}
            </body>
        </html>
        `;
            el.appendChild(ct_iframe);
        });
    }
    /*
        Throw Error
    */
    ThrowError(el, gistInfo, err = '') {
        return __awaiter(this, void 0, void 0, function* () {
            el.createEl('div', { text: "⚠️ Gistr: Failed to load gist:", attr: { style: 'color: #de1f73; font-weight: bold;' } });
            el.createEl('div', { text: "" + gistInfo, attr: { style: 'padding-bottom: 5px; padding-left: 20px' } });
            el.createEl('small', { text: "Error: " + err });
        });
    }
    /*
        Get Javascript
    */
    GetJavascript(el, data, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const reqUrlParams = { url: url, method: "GET", headers: { "Accept": "text/javascript" } };
            try {
                return yield obsidian.request(reqUrlParams);
            }
            catch (err) {
                return this.ThrowError(el, data, `Could not load a valid Javascript from gist url. ( ${err} )`);
            }
        });
    }
    /*
        Get CSS
    */
    GetCSS(el, data, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const reqUrlParams = { url: url, method: "GET", headers: { "Accept": "text/css" } };
            try {
                return yield obsidian.request(reqUrlParams);
            }
            catch (err) {
                return this.ThrowError(el, data, `Could not load a valid Stylesheet from gist url. ( ${err} )`);
            }
        });
    }
}

/*
    Modal > Getting Started
*/
const CFG_CBLK_PREFIX$1 = "";
/*
    Modal > Getting Started > Class
*/
class ModalGettingStarted extends obsidian.Modal {
    constructor(plugin, app, bFirstLoad) {
        super(app);
        this.plugin = plugin;
        this.manifest = plugin.manifest;
        this.firststart = bFirstLoad;
    }
    /*
        Modal > Getting Started > Action > Open & Wait
    */
    openAndAwait() {
        return new Promise((call) => {
            this.resolve = call;
            this.open();
        });
    }
    /*
        Modal > Getting Started > Action > On Open
    */
    onOpen() {
        const { contentEl } = this;
        /*
            Helper method for handling add each line of content
        */
        const AddLine = (elmParent, value, htmltag = null, attr = null) => {
            if (htmltag)
                return elmParent.createEl(htmltag, { text: value, attr: { style: attr } });
            else {
                elmParent.appendText(value);
                return elmParent;
            }
        };
        /*
            Customize moodal stylesheet
        */
        this.modalEl.style.width = "40%";
        this.modalEl.style.paddingLeft = "35px";
        this.modalEl.style.paddingRight = "35px";
        this.modalEl.style.paddingBottom = "35px";
        /*
            Modal > Getting Started > Content > Header
        */
        AddLine(contentEl, this.manifest.name, "h1");
        AddLine(contentEl, "v" + this.manifest.version, "h6", "margin-top: -12px;");
        AddLine(contentEl, lng("gs_base_header"), "small");
        AddLine(contentEl, "", "div", "padding-bottom: 15px;");
        /*
            Modal > Getting Started > Content > Getting Started
        */
        AddLine(contentEl, lng("gs_og_name"), "h2");
        AddLine(contentEl, lng("gs_og_desc"), "small");
        const div_GettingStarted = contentEl.createDiv({ cls: "gistr-modal-button-container" });
        new obsidian.ButtonComponent(div_GettingStarted)
            .setButtonText(lng("gs_og_btn_repo"))
            .setCta()
            .onClick(() => {
            window.open(lng("cfg_sec_support_ogrepo_url"));
        });
        new obsidian.ButtonComponent(div_GettingStarted)
            .setButtonText(lng("gs_og_btn_docs"))
            .onClick(() => {
            window.open(lng("cfg_sec_support_ogdocs_url"));
        });
        AddLine(contentEl, lng("gs_og_sub_1"), "small");
        /*
            Markdown Render Preview
        */
        this.cblk_preview = contentEl.createDiv();
        const gs_UsageCodeblock = "```````" + "\n" + "```" + this.plugin.settings.keyword + "\n" + "gist.domain.com/username/YOUR_GIST_ID" + "\n" + "```" + "\n```````";
        obsidian.MarkdownRenderer.render(this.plugin.app, gs_UsageCodeblock, this.cblk_preview, CFG_CBLK_PREFIX$1 + gs_UsageCodeblock, this.plugin);
        AddLine(contentEl, "", "div", "padding-bottom: 15px;");
        /*
            Modal > Getting Started > Content > Getting Started
        */
        AddLine(contentEl, lng("gs_gh_name"), "h2");
        AddLine(contentEl, lng("gs_gh_desc"), "small");
        this.cblk_preview = contentEl.createDiv();
        const gs_UsageCodeblock_gh = "```````" + "\n" + "```" + this.plugin.settings.keyword + "\n" + "gist.github.com/username/YOUR_GIST_ID" + "\n" + "gist.github.com/username/YOUR_GIST_ID#file_name" + "\n" + "```" + "\n```````";
        obsidian.MarkdownRenderer.render(this.plugin.app, gs_UsageCodeblock_gh, this.cblk_preview, CFG_CBLK_PREFIX$1 + gs_UsageCodeblock_gh, this.plugin);
        /*
            Footer Buttons
        */
        const div_Footer = contentEl.createDiv({ cls: "modal-button-container" });
        if (this.firststart === true) {
            new obsidian.ButtonComponent(div_Footer)
                .setButtonText(lng("gs_btn_settings_open"))
                .setCta()
                .onClick(() => {
                this.resolve("settings-open");
                this.close();
            });
            new obsidian.ButtonComponent(div_Footer)
                .setButtonText(lng("gs_btn_close"))
                .onClick(() => {
                this.close();
            });
        }
        else {
            new obsidian.ButtonComponent(div_Footer)
                .setButtonText(lng("gs_btn_close"))
                .onClick(() => {
                this.close();
            });
        }
    }
    /*
        Modal > Getting Started > Action > Close
    */
    close() {
        this.resolve("");
        super.close();
    }
    /*
        Modal > Getting Started > Action > On Close
    */
    onClose() {
        this.contentEl.empty();
    }
}

/*
    Import
*/
const CFG_CBLK_PREFIX = "";
/*
    Default Settings
*/
const CFG_DEFAULT = {
    keyword: "gistr",
    firststart: true,
    css_og: null,
    css_gh: null,
    theme: "Light",
    blk_pad_t: 10,
    blk_pad_b: 20,
    og_clr_bg_light: "cbcbcb",
    og_clr_bg_dark: "121315"
};
/*
    Theme Options
*/
exports.Themes = void 0;
(function (Themes) {
    Themes["LIGHT"] = "Light";
    Themes["DARK"] = "Dark";
})(exports.Themes || (exports.Themes = {}));
const Themes_GetName = {
    [exports.Themes.LIGHT]: "Light",
    [exports.Themes.DARK]: "Dark",
};
/*
    Extend Plugin
*/
class GistrPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.bLayoutReady = false;
    }
    /*
        Settings > Load
    */
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            // load settings tab
            yield this.loadSettings();
            this.addSettingTab(new OG_Tab_Settings(this.app, this));
            // activate initial load
            this.app.workspace.onLayoutReady(() => __awaiter(this, void 0, void 0, function* () {
                if (this.settings.firststart === true) {
                    this.settings.firststart = false;
                    this.saveSettings();
                    const actSelected = yield new ModalGettingStarted(this.plugin, this.app, true).openAndAwait();
                    if (actSelected === "settings-open") {
                        /*
                            Mute
                        */
                        // @ts-ignore
                        this.app.setting.open("${PluginName}");
                        // @ts-ignore
                        this.app.setting.openTabById("${PluginName}");
                    }
                }
                this.bLayoutReady = true;
            }));
            const gistBackend = new GistrBackend(this.settings);
            this.registerDomEvent(window, "message", gistBackend.messageEventHandler);
            this.registerMarkdownCodeBlockProcessor(this.settings.keyword, gistBackend.processor);
        });
    }
    /*
        Settings > Load
    */
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, CFG_DEFAULT, yield this.loadData());
        });
    }
    /*
        Settings > Save
    */
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
/*
    Settings Tab
*/
class OG_Tab_Settings extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        this.HideGeneral = true;
        this.HideGithub = true;
        this.HideOpengist = true;
        this.HideSupport = false;
    }
    /*
        Display
    */
    display() {
        const { containerEl } = this;
        this.HideGeneral = true;
        this.HideGithub = true;
        this.HideOpengist = true;
        this.HideSupport = false;
        this.createHeader(containerEl);
        this.createMenus(containerEl);
    }
    /*
        Section -> Header
    */
    createHeader(elm) {
        elm.empty();
        elm.createEl("h1", { text: lng("cfg_title") });
        elm.createEl("p", {
            text: lng("cfg_desc"),
            attr: {
                style: 'padding-bottom: 25px'
            },
        });
    }
    /*
        Create Menus
    */
    createMenus(elm) {
        this.Tab_General_New(elm);
        this.tab_general = elm.createDiv();
        this.Tab_OpenGist_New(elm);
        this.tab_opengist = elm.createDiv();
        this.Tab_Github_New(elm);
        this.tab_github = elm.createDiv();
        this.Tab_Support_New(elm);
        this.tab_support = elm.createDiv();
        this.Tab_Support_ShowSettings(this.tab_support);
    }
    /*
        Tab > General > New
    */
    Tab_General_New(elm) {
        const tab_og = elm.createEl("h2", { text: lng("cfg_tab_ge_title"), cls: `gistr-settings-header${this.HideGeneral ? " isfold" : ""}` });
        tab_og.addEventListener("click", () => {
            this.HideGeneral = !this.HideGeneral;
            tab_og.classList.toggle("isfold", this.HideGeneral);
            this.Tab_General_CreateSettings();
        });
    }
    Tab_General_CreateSettings() {
        this.tab_general.empty();
        if (this.HideGeneral)
            return;
        this.Tab_General_ShowSettings(this.tab_general);
    }
    Tab_General_ShowSettings(elm) {
        elm.createEl('small', {
            attr: {
                style: 'display: block; margin-bottom: 25px'
            },
            text: lng("cfg_tab_ge_header")
        });
        /*
            Command Keyword

            changing this will cause all opengist portals to not function until the keyword is changed
            within the box.
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_keyword_name"))
            .setDesc(lng("cfg_sec_keyword_desc"))
            .addText(text => {
            text.setValue(this.plugin.settings.keyword.toString())
                .onChange((val) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.keyword = val;
                yield this.plugin.saveSettings();
            }));
        });
        /*
            Tab Footer Spacer
        */
        elm.createEl('div', {
            attr: {
                style: 'padding-bottom: 40px'
            },
            text: ""
        });
    }
    /*
        Tab > OpenGist > New
    */
    Tab_OpenGist_New(elm) {
        const tab_og = elm.createEl("h2", { text: lng("cfg_tab_og_title"), cls: `gistr-settings-header${this.HideOpengist ? " isfold" : ""}` });
        tab_og.addEventListener("click", () => {
            this.HideOpengist = !this.HideOpengist;
            tab_og.classList.toggle("isfold", this.HideOpengist);
            this.Tab_OpenGist_CreateSettings();
        });
    }
    Tab_OpenGist_CreateSettings() {
        this.tab_opengist.empty();
        if (this.HideOpengist)
            return;
        this.Tab_OpenGist_ShowSettings(this.tab_opengist);
    }
    Tab_OpenGist_ShowSettings(elm) {
        elm.createEl('small', {
            attr: { style: 'display: block; margin-bottom: 25px' },
            text: lng("cfg_tab_og_header")
        });
        /*
            Development notice
        */
        const ct_Note = elm.createDiv();
        const md_notFinished = "> [!NOTE] " + lng("base_underdev_title") + "\n> <small>" + lng("base_underdev_msg") + "</small>";
        obsidian.MarkdownRenderer.render(this.plugin.app, md_notFinished, ct_Note, CFG_CBLK_PREFIX + md_notFinished, this.plugin);
        /*
            Background color (Light)
        */
        new obsidian.Setting(elm)
            .setName("Codeblock BG Color (Light)")
            .setDesc("Hex Color for Opengist codeblock background color (Light Theme) -- Color picker coming soon")
            .addText(text => {
            text.setPlaceholder("cbcbcb")
                .setValue(this.plugin.settings.og_clr_bg_light)
                .onChange((val) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.og_clr_bg_light = val;
                this.plugin.saveSettings();
            }));
        });
        /*
            Background color (Dark)
        */
        new obsidian.Setting(elm)
            .setName("Codeblock BG Color (Dark)")
            .setDesc("Hex Color for Opengist codeblock background color (Dark Theme) -- Color picker coming soon")
            .addText(text => {
            text.setPlaceholder("121315")
                .setValue(this.plugin.settings.og_clr_bg_dark)
                .onChange((val) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.og_clr_bg_dark = val;
                this.plugin.saveSettings();
            }));
        });
        /*
            Codeblock > Padding > Top
        */
        let val_st_padding;
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_padding_top_name"))
            .setDesc(lng("cfg_sec_padding_top_desc"))
            .addSlider(slider => slider
            .setLimits(0, 30, 1)
            .setValue(this.plugin.settings.blk_pad_t)
            .onChange((val) => __awaiter(this, void 0, void 0, function* () {
            val_st_padding.innerText = " " + val.toString();
            this.plugin.settings.blk_pad_t = val;
            this.plugin.saveSettings();
        })))
            .settingEl.createDiv('', (el) => {
            val_st_padding = el;
            el.style.minWidth = "30px";
            el.style.textAlign = "right";
            el.innerText = " " + this.plugin.settings.blk_pad_t.toString();
        });
        /*
            Codeblock > Padding > Bottom
        */
        let val_sb_padding;
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_padding_bottom_name"))
            .setDesc(lng("cfg_sec_padding_bottom_desc"))
            .addSlider(slider => slider
            .setLimits(0, 30, 1)
            .setValue(this.plugin.settings.blk_pad_b)
            .onChange((val) => __awaiter(this, void 0, void 0, function* () {
            val_sb_padding.innerText = " " + val.toString();
            this.plugin.settings.blk_pad_b = val;
            this.plugin.saveSettings();
        })))
            .settingEl.createDiv('', (el) => {
            val_sb_padding = el;
            el.style.minWidth = "30px";
            el.style.textAlign = "right";
            el.innerText = " " + this.plugin.settings.blk_pad_b.toString();
        });
        /*
            Codeblock > Theme
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_theme_name"))
            .setDesc(lng("cfg_sec_theme_desc"))
            .addDropdown(dropdown => {
            dropdown
                .addOption(exports.Themes.LIGHT, Themes_GetName[exports.Themes.LIGHT])
                .addOption(exports.Themes.DARK, Themes_GetName[exports.Themes.DARK])
                .setValue(this.plugin.settings.theme)
                .onChange((val) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.theme = val;
                yield this.plugin.saveSettings();
            }));
        });
        /*
            Codeblock > CSS Override
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_css_name"))
            .setDesc(lng("cfg_sec_css_desc"))
            .addTextArea(text => text
            .setPlaceholder(lng("cfg_sec_css_placeholder"))
            .setValue(this.plugin.settings.css_og)
            .onChange((val) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.css_og = val;
            yield this.plugin.saveSettings();
        })));
        /*
            Tab Footer Spacer
        */
        elm.createEl('div', {
            attr: {
                style: 'padding-bottom: 40px'
            },
            text: ""
        });
    }
    /*
        Tab > Github Gists > New
    */
    Tab_Github_New(elm) {
        const tab_gh = elm.createEl("h2", { text: lng("cfg_tab_gh_title"), cls: `gistr-settings-header${this.HideGithub ? " isfold" : ""}` });
        tab_gh.addEventListener("click", () => {
            this.HideGithub = !this.HideGithub;
            tab_gh.classList.toggle("isfold", this.HideGithub);
            this.Tab_Github_CreateSettings();
        });
    }
    Tab_Github_CreateSettings() {
        this.tab_github.empty();
        if (this.HideGithub)
            return;
        this.Tab_Github_ShowSettings(this.tab_github);
    }
    Tab_Github_ShowSettings(elm) {
        elm.createEl('small', {
            attr: {
                style: 'display: block'
            },
            text: lng("cfg_tab_gh_header")
        });
        /*
            Codeblock > CSS Override
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_css_name"))
            .setDesc(lng("cfg_sec_css_desc"))
            .addTextArea(text => text
            .setPlaceholder(lng("cfg_sec_css_placeholder"))
            .setValue(this.plugin.settings.css_gh)
            .onChange((val) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.css_gh = val;
            yield this.plugin.saveSettings();
        })));
        /*
            Tab Footer Spacer
        */
        elm.createEl('div', {
            attr: {
                style: 'padding-bottom: 40px'
            },
            text: ""
        });
    }
    /*
        Tab > Support > New
    */
    Tab_Support_New(elm) {
        const tab_og = elm.createEl("h2", { text: lng("cfg_tab_sp_title"), cls: `gistr-settings-header${this.HideSupport ? " isfold" : ""}` });
        tab_og.addEventListener("click", () => {
            this.HideSupport = !this.HideSupport;
            tab_og.classList.toggle("isfold", this.HideSupport);
            this.Tab_Support_CreateSettings();
        });
    }
    Tab_Support_CreateSettings() {
        this.tab_support.empty();
        if (this.HideSupport)
            return;
        this.Tab_Support_ShowSettings(this.tab_support);
    }
    Tab_Support_ShowSettings(elm) {
        /*
            Section -> Support Buttons
        */
        elm.createEl('small', {
            attr: {
                style: 'display: block; margin-bottom: 25px'
            },
            text: lng("cfg_sec_support_desc")
        });
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_support_gs_name"))
            .setDesc(lng("cfg_sec_support_gs_desc"))
            .addButton(btn => {
            btn.setButtonText(lng("cfg_sec_support_gs_btn"))
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield new ModalGettingStarted(this.plugin, this.app, false).openAndAwait();
            }));
        });
        /*
            Button -> Plugin Repo
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_support_repo_label"))
            .setDesc(lng("cfg_sec_support_repo_url"))
            .addButton((btn) => {
            btn.setButtonText(lng("cfg_sec_support_repo_btn")).onClick(() => {
                window.open(lng("cfg_sec_support_repo_url"));
            });
        });
        /*
            Button -> OpenGist > Download
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_support_ogrepo_label"))
            .setDesc(lng("cfg_sec_support_ogrepo_url"))
            .addButton((btn) => {
            btn.setButtonText(lng("cfg_sec_support_ogrepo_btn")).onClick(() => {
                window.open(lng("cfg_sec_support_ogrepo_url"));
            });
        });
        /*
            Button -> OpenGist > Docs
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_support_ogdocs_label"))
            .setDesc(lng("cfg_sec_support_ogdocs_url"))
            .addButton((btn) => {
            btn.setButtonText(lng("cfg_sec_support_ogdocs_btn")).onClick(() => {
                window.open(lng("cfg_sec_support_ogdocs_url"));
            });
        });
        /*
            Button -> OpenGist > Docs
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_support_ogdemo_label"))
            .setDesc(lng("cfg_sec_support_ogdemo_url"))
            .addButton((btn) => {
            btn.setButtonText(lng("cfg_sec_support_ogdemo_btn")).onClick(() => {
                window.open(lng("cfg_sec_support_ogdemo_url"));
            });
        });
        /*
            Button -> Github Gist
        */
        new obsidian.Setting(elm)
            .setName(lng("cfg_sec_support_gist_label"))
            .setDesc(lng("cfg_sec_support_gist_url"))
            .addButton((btn) => {
            btn.setButtonText(lng("cfg_sec_support_gist_btn")).onClick(() => {
                window.open(lng("cfg_sec_support_gist_url"));
            });
        });
        /*
            Button -> Donate
        */
        const div_Donate = elm.createDiv({ cls: "gistr-donate" });
        const lnk_Donate = new DocumentFragment();
        lnk_Donate.append(obsidian.sanitizeHTMLToDom(`
                    <a href="https://buymeacoffee.com/aetherinox">
                    <img alt="" src="https://img.buymeacoffee.com/button-api/?text=Donate Java&emoji=🤓&slug=aetherinox&button_colour=e8115c&font_colour=ffffff&font_family=Lato&outline_colour=000000&coffee_colour=FFDD00"/>
                    </a>
                `));
        new obsidian.Setting(div_Donate).setDesc(lnk_Donate);
    }
}

exports.CFG_CBLK_PREFIX = CFG_CBLK_PREFIX;
exports.Themes_GetName = Themes_GetName;
exports["default"] = GistrPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
